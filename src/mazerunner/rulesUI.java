/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mazerunner;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Dell
 */
public class rulesUI extends javax.swing.JFrame {

        /**
         * Creates new form rulesUI
         */
        int size;
        int index;

        double bestTime;

        public rulesUI(int size) {
                this.size = size;
                initComponents();
        }

        private rulesUI() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        rulesUI(int size, double time) {
                this.size = size;
                bestTime = time;
                initComponents();
        }

        rulesUI(int size, double time, int i) {
                this.size = size;
                bestTime = time;
                index = i;
                initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jButton1 = new javax.swing.JButton();
                jLabel1 = new javax.swing.JLabel();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("Rules");
                getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                jButton1.setBorderPainted(false);
                jButton1.setContentAreaFilled(false);
                jButton1.setFocusPainted(false);
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                        }
                });
                jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                jButton1KeyPressed(evt);
                        }
                });
                getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 420, 220, 50));

                jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mazerunner/maze rules.png"))); // NOI18N
                getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

                pack();
                setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            StartGame();
    }//GEN-LAST:event_jButton1ActionPerformed

        private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
                // TODO add your handling code here:
                if (evt.getKeyCode() == 10) {
                        StartGame();
                }
        }//GEN-LAST:event_jButton1KeyPressed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(rulesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(rulesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(rulesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(rulesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                // new rulesUI().setVisible(true);
                        }
                });
        }
        private player p;
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton jButton1;
        private javax.swing.JLabel jLabel1;
        // End of variables declaration//GEN-END:variables

        private void StartGame() {
                String s = JOptionPane.showInputDialog("Enter Player Name:");
                if (s == null)
                        return;
                if (s.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Player Name can not be empty");
                } else {
                        try {
                                this.p = new player();
                                player p = new player(s);
                                this.p.setPlayer(p);
                                System.out.println("Player:"+p.toString());
                                //new stopwatch().setVisible(true);
                                new Generator(p, size, bestTime, index).setVisible(true);
                                this.setVisible(false);
                        } catch (FileNotFoundException ex) {
                                Logger.getLogger(rulesUI.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                                Logger.getLogger(rulesUI.class.getName()).log(Level.SEVERE, null, ex);
                        }

                }
        }
}
