/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Dell
 */
package mazerunner;

import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Home extends javax.swing.JFrame {

        Double[] times;
        String[] players;

        /**
         * Creates new form Home
         */
        public Home() {
                size = gridSize[0];
                times = new Double[5];
                players = new String[5];
                try{
                RandomAccessFile file = new RandomAccessFile("bestTimes.dat", "rw");
                for (int i = 0; i < 5; i++) {
                        times[i] = Math.round(file.readDouble()*100)/100.0;
                        char[] temp = new char[20];
                        for (int j = 0; j < temp.length; j++) {
                                temp[j] = file.readChar();
                        }
                        players[i] = new String(temp);
                        players[i] = players[i].trim();
                }
                }catch(Exception e){
                        newFile();
                        this.setVisible(false);
                        new Home().setVisible(true);
                }
                
                initComponents();
                if (times[0] == 0) {
                        jLabel2.setText("Time To Beat: --/--");
                        jLabel3.setText("Player To Beat: N/A");
                } else {
                        jLabel2.setText("Time To Beat: " + times[0] + " secs");
                        jLabel3.setText("Player To Beat: " + players[0]);

                }
                jLabel1.setFocusable(true);
        }

        /**
         * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jButton3 = new javax.swing.JButton();
                jButton1 = new javax.swing.JButton();
                jButton2 = new javax.swing.JButton();
                jButton4 = new javax.swing.JButton();
                level = new javax.swing.JLabel();
                jButton5 = new javax.swing.JButton();
                jButton6 = new javax.swing.JButton();
                jLabel2 = new javax.swing.JLabel();
                jLabel3 = new javax.swing.JLabel();
                jLabel1 = new javax.swing.JLabel();

                jButton3.setText("jButton3");

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("Home");
                getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                jButton1.setBorderPainted(false);
                jButton1.setContentAreaFilled(false);
                jButton1.setFocusPainted(false);
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                        }
                });
                getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 460, 77, 80));

                jButton2.setBorderPainted(false);
                jButton2.setContentAreaFilled(false);
                jButton2.setFocusable(false);
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton2ActionPerformed(evt);
                        }
                });
                getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 180, 60, 70));

                jButton4.setBorderPainted(false);
                jButton4.setContentAreaFilled(false);
                jButton4.setFocusable(false);
                jButton4.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton4ActionPerformed(evt);
                        }
                });
                jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                jButton4KeyPressed(evt);
                        }
                });
                getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 190, 50, 70));

                level.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
                level.setForeground(new java.awt.Color(255, 255, 255));
                level.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                level.setText("BEGINNER");
                getContentPane().add(level, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 210, 210, 70));

                jButton5.setBorderPainted(false);
                jButton5.setContentAreaFilled(false);
                jButton5.setFocusPainted(false);
                jButton5.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton5ActionPerformed(evt);
                        }
                });
                getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, 280, 60));

                jButton6.setBorderPainted(false);
                jButton6.setContentAreaFilled(false);
                jButton6.setFocusPainted(false);
                jButton6.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton6ActionPerformed(evt);
                        }
                });
                getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 450, 110, 100));

                jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
                jLabel2.setForeground(new java.awt.Color(255, 255, 255));
                jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel2.setText("Time To Beat:");
                getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, 210, 20));

                jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
                jLabel3.setForeground(new java.awt.Color(255, 255, 255));
                jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel3.setText("Player To Beat:");
                getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(381, 280, 230, -1));

                jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mazerunner/mazefinal.png"))); // NOI18N
                jLabel1.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                jLabel1KeyPressed(evt);
                        }
                });
                getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

                pack();
                setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            Left();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            Right();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
            Enter();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
            try {
                    new leaderboardUI().setVisible(true);
            } catch (IOException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed

    }//GEN-LAST:event_jButton4KeyPressed

        private void jLabel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel1KeyPressed
                // TODO add your handling code here:
                //System.out.println(evt.getKeyCode());
                if (evt.getKeyCode() == 39) {
                        //Right Key Press
                        Right();
                }
                if (evt.getKeyCode() == 37) {
                        //Right Key Press
                        Left();
                }
                if (evt.getKeyCode() == 10) {
                        //Enter Key Press
                        Enter();
                }
        }//GEN-LAST:event_jLabel1KeyPressed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                new Home().setVisible(true);
                        }
                });
        }

        private int size;
        private int[] gridSize = {10, 30, 50, 90, 110};
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton jButton1;
        private javax.swing.JButton jButton2;
        private javax.swing.JButton jButton3;
        private javax.swing.JButton jButton4;
        private javax.swing.JButton jButton5;
        private javax.swing.JButton jButton6;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel level;
        // End of variables declaration//GEN-END:variables

        private void Right() {
                if (level.getText().equals("BEGINNER")) {
                        level.setText("AMATEUR");
                        size = gridSize[1];
                        if (times[1] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[1].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[1]);
                        }

                } else if (level.getText().equals("AMATEUR")) {
                        level.setText("NOVICE");
                        size = gridSize[2];
                        if (times[2] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[2].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[2]);
                        }

                } else if (level.getText().equals("NOVICE")) {
                        level.setText("DIFFICULT");
                        size = gridSize[3];
                        if (times[3] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[3].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[3]);
                        }

                } else if (level.getText().equals("DIFFICULT")) {
                        level.setText("EXPERT");
                        size = gridSize[4];
                        if (times[4] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[4].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[4]);
                        }

                }
        }

        private void Left() {
                if (level.getText().equals("EXPERT")) {
                        level.setText("DIFFICULT");
                        size = gridSize[3];
                        if (times[3] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[3].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[3]);
                        }

                } else if (level.getText().equals("DIFFICULT")) {
                        level.setText("NOVICE");
                        size = gridSize[2];
                        if (times[2] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[2].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[2]);
                        }

                } else if (level.getText().equals("NOVICE")) {
                        level.setText("AMATEUR");
                        size = gridSize[1];
                        if (times[1] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[1].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[1]);
                        }

                } else if (level.getText().equals("AMATEUR")) {
                        level.setText("BEGINNER");
                        size = gridSize[0];
                        if (times[0] == 0) {
                                jLabel2.setText("Time To Beat: --/--");
                                jLabel3.setText("Player To Beat: N/A");
                        } else {
                                jLabel2.setText("Time To Beat: " + times[0].toString() + " secs");
                                jLabel3.setText("Player To Beat: " + players[0]);
                        }

                }
        }

        private void Enter() {
                if (level.getText().equals("BEGINNER")) {
                        new rulesUI(size, times[0], 0).setVisible(true);
                } else if (level.getText().equals("AMATEUR")) {
                        new rulesUI(size, times[1], 1).setVisible(true);
                } else if (level.getText().equals("NOVICE")) {
                        new rulesUI(size, times[2], 2).setVisible(true);
                } else if (level.getText().equals("DIFFICULT")) {
                        new rulesUI(size, times[3], 3).setVisible(true);
                } else {
                        new rulesUI(size, times[4], 4).setVisible(true);
                }

                this.setVisible(false);
        }
        private void newFile() {
                try {
                        RandomAccessFile file = new RandomAccessFile("bestTimes.dat", "rw");
                        file.writeDouble(0.0);
                        StringBuffer sb;
                        sb = new StringBuffer("");
                        sb.setLength(20);
                        file.writeChars(sb.toString());
                        file.writeDouble(0.0);
                        sb = new StringBuffer("");
                        sb.setLength(20);
                        file.writeChars(sb.toString());
                        file.writeDouble(0.0);
                        sb = new StringBuffer("");
                        sb.setLength(20);
                        file.writeChars(sb.toString());
                        file.writeDouble(0.0);
                        sb = new StringBuffer("");
                        sb.setLength(20);
                        file.writeChars(sb.toString());
                        file.writeDouble(0.0);
                        sb = new StringBuffer("");
                        sb.setLength(20);
                        file.writeChars(sb.toString());
                } catch (FileNotFoundException ex) {
                        Logger.getLogger(victoryUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                        Logger.getLogger(victoryUI.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
}
